// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Profile information
  profile UserProfile?

  // Activity logs
  activities ActivityLog[]

  // Saved preferences
  preferences UserPreferences?

  @@map("users")
}

model UserProfile {
  id           String       @id @default(cuid())
  userId       String       @unique
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  age          Int?
  gender       Gender?
  height       Float?       // in cm
  weight       Float?       // in kg
  goal         FitnessGoal?
  activityLevel ActivityLevel?
  
  // Body measurements
  bodyFat      Float?       // percentage
  muscleMass   Float?       // in kg
  
  // Calculated values
  bmr          Float?       // Basal Metabolic Rate
  tdee         Float?       // Total Daily Energy Expenditure
  targetCalories Float?     // Daily calorie target
  
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@map("user_profiles")
}

model UserPreferences {
  id       String @id @default(cuid())
  userId   String @unique
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Diet preferences
  dietaryRestrictions String[] // ["vegetarian", "vegan", "gluten-free", etc.]
  cuisinePreferences  String[] // ["italian", "asian", "mexican", etc.]
  allergies          String[] // ["nuts", "dairy", "shellfish", etc.]
  dislikedFoods      String[] // ["broccoli", "fish", etc.]
  preferredProteins  String[] // ["chicken", "beef", "tofu", etc.]
  
  // Meal preferences
  budgetRange        String?  // "low", "medium", "high"
  cookingTime        String?  // "quick", "medium", "long"
  spiceLevel         String?  // "mild", "medium", "spicy"
  mealComplexity     String?  // "simple", "moderate", "complex"
  
  // Location preferences
  location           String?
  country            String?
  region             String?
  localTastes        String[] // ["spicy", "sweet", "savory", etc.]
  traditionalFoods   Boolean  @default(false)
  
  // App preferences
  units              String   @default("metric") // "metric" or "imperial"
  theme              String   @default("dark")   // "light" or "dark"
  language           String   @default("en")     // "en", "es", "fr", etc.
  notifications      Boolean  @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_preferences")
}

model ActivityLog {
  id        String      @id @default(cuid())
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type      ActivityType
  action    String      // "login", "logout", "profile_update", "workout_complete", etc.
  details   Json?       // Additional details about the activity
  ipAddress String?
  userAgent String?
  
  createdAt DateTime    @default(now())

  @@map("activity_logs")
}

model WorkoutSession {
  id          String   @id @default(cuid())
  userId      String
  
  name        String
  exercises   Json     // Array of exercises with sets, reps, weights
  duration    Int      // in minutes
  caloriesBurned Float?
  notes       String?
  
  completedAt DateTime @default(now())
  createdAt   DateTime @default(now())

  @@map("workout_sessions")
}

model NutritionEntry {
  id        String   @id @default(cuid())
  userId    String
  
  date      DateTime @default(now())
  mealType  MealType // breakfast, lunch, dinner, snack
  
  foodName  String
  calories  Float
  protein   Float    // in grams
  carbs     Float    // in grams
  fat       Float    // in grams
  fiber     Float?   // in grams
  sugar     Float?   // in grams
  sodium    Float?   // in mg
  
  quantity  Float    @default(1)
  unit      String   @default("serving") // "serving", "cup", "gram", etc.
  
  createdAt DateTime @default(now())

  @@map("nutrition_entries")
}

model Goal {
  id          String     @id @default(cuid())
  userId      String
  
  title       String
  description String?
  category    GoalCategory
  targetValue Float?     // target weight, body fat %, etc.
  currentValue Float?    // current progress
  unit        String?    // "kg", "%", "reps", etc.
  
  targetDate  DateTime?
  isCompleted Boolean    @default(false)
  completedAt DateTime?
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("goals")
}

// Enums
enum Role {
  USER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum FitnessGoal {
  LOSE_WEIGHT
  GAIN_WEIGHT
  MAINTAIN_WEIGHT
  BUILD_MUSCLE
  IMPROVE_ENDURANCE
  GENERAL_FITNESS
}

enum ActivityLevel {
  SEDENTARY     // Little to no exercise
  LIGHT         // Light exercise 1-3 days/week
  MODERATE      // Moderate exercise 3-5 days/week
  ACTIVE        // Heavy exercise 6-7 days/week
  VERY_ACTIVE   // Very heavy exercise, physical job
}

enum ActivityType {
  AUTH
  PROFILE
  WORKOUT
  NUTRITION
  GOAL
  SYSTEM
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}

enum GoalCategory {
  WEIGHT_LOSS
  WEIGHT_GAIN
  MUSCLE_BUILDING
  STRENGTH
  ENDURANCE
  FLEXIBILITY
  NUTRITION
  HABIT
}
